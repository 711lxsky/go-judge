name: Build
on:
  push:
    branches: [master]
    tags: [v*]
jobs:
  create-release:
    name: Create release
    runs-on: ubuntu-latest
    outputs: 
      upload_url: ${{ steps.create_release.outputs.upload_url }} 
    steps:
      - run: echo Release ${{ github.ref }}
      - name: Create Release
        if: ${{ contains(github.ref, 'v') }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with: 
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
  build:
    name: Build-${{ matrix.os }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-latest
          - ubuntu-latest
          - macos-latest
        GOARCH:
          - amd64 
    steps:
      - name: Set up Go 1.14
        uses: actions/setup-go@v2
        with:
          go-version: 1.14
      - name: Check out
        uses: actions/checkout@v2
      - name: Get git tag ref
        run: git fetch --prune --unshallow --tags
      - name: Restore Cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Download dependencies
        run: go mod download

      - name: Build on Linux
        if: ${{ matrix.os == 'ubuntu-latest' }} 
        env:
          GOARCH: ${{ matrix.GOARCH }}
        run: |
          go generate ./cmd/executorserver
          go build -o executorserver ./cmd/executorserver
          go build -o executorshell ./cmd/executorshell
      - name: Build shared objects on Linux
        if: ${{ matrix.os == 'ubuntu-latest' }} 
        env:
          GOARCH: ${{ matrix.GOARCH }}
        run: |
          go build -o cinit ./cmd/cinit
          go build -buildmode=c-shared -o executorserver.so ./cmd/ffi
      - name: Upload executorserver on linux
        if: ${{ matrix.os == 'ubuntu-latest' }} 
        uses: actions/upload-artifact@v2
        with:
          name: ExecutorServer-${{ matrix.GOARCH }}
          path: executorserver
      - name: Upload executorshell on linux
        if: ${{ matrix.os == 'ubuntu-latest' }} 
        uses: actions/upload-artifact@v2
        with:
          name: ExecutorShell-${{ matrix.GOARCH }}
          path: executorshell
      - name: Upload cinit on linux
        if: ${{ matrix.os == 'ubuntu-latest' }} 
        uses: actions/upload-artifact@v2
        with:
          name: cinit-${{ matrix.GOARCH }}
          path: cinit
      - name: Upload executorserver.so on linux
        if: ${{ matrix.os == 'ubuntu-latest' }} 
        uses: actions/upload-artifact@v2
        with:
          name: ExecutorServer-${{ matrix.GOARCH }}.so
          path: executorserver.so
      - name: Upload assets for linux
        if: ${{ matrix.os == 'ubuntu-latest' && contains(github.ref, 'v') }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: executorserver
          asset_name: executorserver-${{ matrix.GOARCH }}
          asset_content_type: application/octet-stream

      - name: Build on Windows
        if: ${{ matrix.os == 'windows-latest' }}
        env:
          GOARCH: ${{ matrix.GOARCH }}
        run: |
          go generate ./cmd/executorserver
          go build -o executorserver.exe ./cmd/executorserver
      - name: Build shared object on Windows
        if: ${{ matrix.os == 'windows-latest' }}
        env:
          GOARCH: ${{ matrix.GOARCH }}
        run: |
          go build -buildmode=c-shared -o executorserver.dll ./cmd/ffi
      - name: Upload executorserver.exe on Windows
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v2
        with:
          name: ExecutorServer-${{ matrix.GOARCH }}.exe
          path: executorserver.exe
      - name: Upload executorserver.dll on Windows
        if: ${{ matrix.os == 'windows-latest' }}
        uses: actions/upload-artifact@v2
        with:
          name: ExecutorServer-${{ matrix.GOARCH }}.dll
          path: executorserver.dll
      - name: Upload assets for windows
        if: ${{ matrix.os == 'windows-latest' && contains(github.ref, 'v') }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: executorserver.exe
          asset_name: executorserver-${{ matrix.GOARCH }}.exe
          asset_content_type: application/octet-stream

      - name: Build on macOS
        if: ${{ matrix.os == 'macos-latest' }}
        env:
          GOARCH: ${{ matrix.GOARCH }}
        run: |
          go generate ./cmd/executorserver
          go build -o executorserver ./cmd/executorserver
          go build -o executorshell ./cmd/executorshell
      - name: Build shared object on macOS
        if: ${{ matrix.os == 'macos-latest' }}
        env:
          GOARCH: ${{ matrix.GOARCH }}
        run: |
          go build -buildmode=c-shared -o executorserver.dylib ./cmd/ffi
      - name: Upload executorserver on macOS
        if: ${{ matrix.os == 'macos-latest' }}
        uses: actions/upload-artifact@v2
        with:
          name: ExecutorServer-MacOS-${{ matrix.GOARCH }}
          path: executorserver
      - name: Upload executorshell on macOS
        if: ${{ matrix.os == 'macos-latest' }}
        uses: actions/upload-artifact@v2
        with:
          name: ExecutorShell-MacOS-${{ matrix.GOARCH }}
          path: executorshell
      - name: Upload executorserver.dylib on macOS
        if: ${{ matrix.os == 'macos-latest' }}
        uses: actions/upload-artifact@v2
        with:
          name: ExecutorServer-${{ matrix.GOARCH }}.dylib
          path: executorserver.dylib  
      - name: Upload assets for macOS
        if: ${{ matrix.os == 'macos-latest' && contains(github.ref, 'v') }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: executorserver
          asset_name: executorserver-macOS-${{ matrix.GOARCH }}
          asset_content_type: application/octet-stream
  docker:
    runs-on: ubuntu-latest
    steps:
      - 
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - 
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - 
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ contains(github.ref, 'v') }}
          file: Dockerfile.exec
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: |
            criyle/executorserver:latest
            criyle/executorserver:${{ github.ref }}
      -
        name: Build and push alpine
        id: docker_build_alpine
        uses: docker/build-push-action@v2
        with:
          context: .
          push: ${{ contains(github.ref, 'v') }}
          file: Dockerfile.alpine
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: |
            criyle/executorserver:${{ github.ref }}-alpine
      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
      -
        name: Image digest alpine
        run: echo ${{ steps.docker_build_alpine.outputs.digest }}
